Secure Design App - User Manual
WEBSITE NAME-
drewslab.selfip.com
NOTE**
Your browser will claim trying to steal data, my app is not designed for this. The reason is because I use a self signed certificate which isn't trusted by a real world trusted authority.
BIGGER NOTE**
At the time of submission, this website is up. I won't constantly be monitoring it but I am always available to diagnose connectivity issues to the website or other errors.
You may need to clear browser data if unable to connect remotely.
If at any time you are unable to visit it, email @mcandrewno@gmail.com or call 470-772-1183.
GITHUB LINK
https://github.com/McandrewOkwei/SecureDesignApp
Introduction
This web application is built using Razor Pages in .NET 8 and is configured to use MySQL as its database. The application is containerized using Docker for easy deployment and includes features such as user authentication & authorization, encrypted data storage, shopping cart functionality, and secure payment processing.
---
System Architecture
Components
1.	Web Application Container: ASP.NET Core 8 Razor Pages application
2.	Database Container: MySQL container for data storage
3.	Docker Network: Connects the containers securely
4.	Data Protection Keys: Persistent volume for authentication token security
Technologies Used
•	.NET 8 Razor Pages
•	MySQL Database
•	Docker Containers
•	Entity Framework Core
•	BCrypt for password hashing
•	AES encryption for sensitive data
---
Docker Setup Instructions
Prerequisites
1.	Docker: Install Docker Desktop for your platform
2.	Docker Compose: Used for orchestrating containers (included with Docker Desktop)
Starting the Application
1.	Clone the repository:
git clone https://github.com/McandrewOkwei/SecureDesignApp
cd SecureDesignApp
2.	Get Docker MySQL Container:
docker pull mysql
3.	Create a Docker Network:
docker network create app-network
4.	Start the containers:
docker-compose up -d
5.	Access the application at:
https://localhost:444
Docker Container Architecture
•	Web App Container: Contains the .NET 8 application (cont1)
•	MySQL Container: Stores the application data (mysql)
•	Network: A custom bridge network (app-network) connects the containers
•	Volumes:
•	keys-volume: Persists authentication keys
•	mysql-data: Persists database information
•	./Cert:/app/Cert:ro: SSL certificate mounted as read-only
Docker Network Details
The app-network bridge network is crucial for:
•	Container-to-container communication using container names as hostnames
•	Security isolation from other Docker containers
•	Allowing the web application to connect to MySQL using hostname mysql rather than IP addresses
•	Connection string referencing Server=mysql in the .NET application
Docker Commands
•	View logs: docker logs cont1
•	Stop containers: docker-compose down
•	Rebuild application: docker-compose up --build -d
•	Access MySQL shell: docker exec -it mysql mysql -uroot -pMo22924! dotnetdb
•	Inspect network: docker network inspect app-network
•	List connected containers: docker network inspect app-network -f "{{json .Containers}}"
---
Database Configuration
MySQL Container Setup
The MySQL container is configured with:
•	Container name: mysql
•	Root password: Whatever you set your mysql password as!
•	Default database: dotnetdb
•	Port mapping: 3306:3306
Connection String
The application connects to MySQL using the connection string in appsettings.json:
